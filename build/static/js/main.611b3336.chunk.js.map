{"version":3,"sources":["MintCountdown.tsx","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","connection.tsx","candy-machine.ts"],"names":["useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","done","marginBottom","fontWeight","item","MintCountdown","date","status","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","CTAButton","styled","Button","MintButton","onMint","candyMachine","isMinting","setIsMinting","isActive","wallet","useWallet","connection","useConnection","useState","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","useEffect","mint","a","removeAccountChangeListener","previousGatewayStatus","value","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","find","state","console","log","disabled","onClick","gatekeeper","network","gatekeeperNetwork","toBase58","ACTIVE","findGatewayToken","publicKey","gatewayToken","isValid","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","Error","variant","isSoldOut","CircularProgress","isPresale","isWhitelistOnly","ConnectButton","WalletDialogButton","MintContainer","div","getCountdownDate","endSettings","endSettingType","toDate","number","goLiveDate","anchor","Date","getTime","undefined","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","message","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcHost","anchorWallet","useMemo","signAllTransactions","signTransaction","refreshCandyMachineState","useCallback","commitment","Connection","candyMachineId","getCandyMachineState","cndy","active","toNumber","presale","isWLUser","userPrice","price","whitelistMintSettings","PublicKey","getAtaForMint","token","getTokenAccountBalance","balance","parseInt","amount","tokenMint","valid","gte","getBalance","limit","Math","min","itemsAvailable","itemsRedeemed","getCollectionPDA","collectionPDA","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","mode","burnEveryTime","expireOnUse","hideDuration","startsWith","beforeTransactions","afterTransactions","document","getElementById","click","connected","program","createAccountsForMint","setupMint","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","mintOneToken","mintResult","metadataStatus","mintTxId","provider","metadataKey","remaining","msg","code","location","reload","indexOf","toggleMintButton","now","loop","setTimeout","Container","marginTop","maxWidth","position","paddingBottom","backgroundColor","Grid","container","direction","wrap","xs","Typography","formatNumber","asNumber","align","val","Snackbar","autoHideDuration","onClose","Alert","createTheme","palette","type","process","e","getCandyMachineId","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","DEFAULT_TIMEOUT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","LAMPORTS_PER_SOL","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","SequenceType","sendTransactions","candySigner","instructionSet","signersSet","sequenceType","Parallel","successCallback","txid","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","instructions","signers","length","Transaction","forEach","instruction","add","recentBlockhash","blockhash","setSigners","map","s","partialSign","push","partiallySignedTransactions","filter","t","signatures","sig","equals","fullySignedTransactions","candySignedTxns","txnUnsigned","config","verifySignatures","serialize","serializedTxn","fetch","method","headers","body","JSON","stringify","fetchSignature","json","dataJson","txn","cmsSignedTxn","data","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","slot","StopOnFailure","Promise","all","txs","result","getUnixTs","timeout","rawTransaction","startTime","sendRawTransaction","skipPreflight","sleep","confirmation","error","simulateResult","simulateTransaction","logs","line","slice","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","queryStatus","confirmations","subId","resolve","reject","onSignature","context","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","ms","CANDY_MACHINE_PROGRAM","TOKEN_METADATA_PROGRAM_ID","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","preflightCommitment","fetchIdl","idl","account","id","authority","treasury","isSignatureRequired","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","Keypair","generate","userTokenAccountAddress","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","userTokenAccount","setupState","userPayingAccountAddress","candyMachineSigner","remainingAccounts","cleanupInstructions","whitelistToken","whitelistBurnAuthority","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","rm","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","mintTxn"],"mappings":"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","file":"static/js/main.611b3336.chunk.js","sourcesContent":["import { Paper } from '@material-ui/core';\nimport Countdown from 'react-countdown';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      padding: theme.spacing(0),\n      '& > *': {\n        margin: theme.spacing(0.4),\n        width: theme.spacing(6),\n        height: theme.spacing(6),\n        display: 'flex',\n        flexDirection: 'column',\n        alignContent: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n        background: '#384457',\n        color: 'white',\n        borderRadius: 5,\n        fontSize: 10,\n      },\n    },\n    done: {\n      display: 'flex',\n      margin: 0,\n      marginBottom: theme.spacing(0.5),\n      height: theme.spacing(3.5),\n      padding: theme.spacing(1),\n      flexDirection: 'column',\n      alignContent: 'center',\n      alignItems: 'center',\n      justifyContent: 'center',\n      background: '#384457',\n      color: 'white',\n      borderRadius: 5,\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n    item: {\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n  }),\n);\n\ninterface MintCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n}\n\ninterface MintCountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\n  date,\n  status,\n  style,\n  onComplete,\n}) => {\n  const classes = useStyles();\n  const renderCountdown = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed,\n  }: MintCountdownRender) => {\n    hours += days * 24;\n    if (completed) {\n      return status ? <span className={classes.done}>{status}</span> : null;\n    } else {\n      return (\n        <div className={classes.root} style={style}>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {hours < 10 ? `0${hours}` : hours}\n            </span>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </span>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </span>\n            <span>secs</span>\n          </Paper>\n        </div>\n      );\n    }\n  };\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n","import styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport { CandyMachineAccount } from './candy-machine';\nimport { CircularProgress } from '@material-ui/core';\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\nimport { useEffect, useState, useRef } from 'react';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport {\n  findGatewayToken,\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\n  onGatewayTokenChange,\n  removeAccountChangeListener,\n} from '@identity.com/solana-gateway-ts';\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  setIsMinting,\n  isActive,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  setIsMinting: (val: boolean) => void;\n  isActive: boolean;\n}) => {\n  const wallet = useWallet();\n  const connection = useConnection();\n  const [verified, setVerified] = useState(false);\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n  const [clicked, setClicked] = useState(false);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return 'SOLD OUT';\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n      return 'WHITELIST MINT';\n    }\n\n    return 'MINT';\n  };\n\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(\n        connection.connection,\n        webSocketSubscriptionId,\n      );\n      await onMint();\n\n      setClicked(false);\n      setVerified(false);\n    };\n    if (verified && clicked) {\n      mint();\n    }\n  }, [\n    verified,\n    clicked,\n    connection.connection,\n    onMint,\n    webSocketSubscriptionId,\n  ]);\n\n  const previousGatewayStatus = usePrevious(gatewayStatus);\n  useEffect(() => {\n    const fromStates = [\n      GatewayStatus.NOT_REQUESTED,\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\n    ];\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\n    if (\n      fromStates.find(state => previousGatewayStatus === state) &&\n      !invalidToStates.find(state => gatewayStatus === state)\n    ) {\n      setIsMinting(true);\n    }\n    console.log('change: ', gatewayStatus);\n  }, [setIsMinting, previousGatewayStatus, gatewayStatus]);\n\n  return (\n    <CTAButton\n      disabled={isMinting || !isActive}\n      onClick={async () => {\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          const network =\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n          if (network === 'ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6') {\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\n              await onMint();\n            } else {\n              // setIsMinting(true);\n              await requestGatewayToken();\n              console.log('after: ', gatewayStatus);\n            }\n          } else if (\n            network === 'ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE' ||\n            network === 'tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt'\n          ) {\n            setClicked(true);\n            const gatewayToken = await findGatewayToken(\n              connection.connection,\n              wallet.publicKey!,\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\n            );\n\n            if (gatewayToken?.isValid()) {\n              await onMint();\n            } else {\n              window.open(\n                `https://verify.encore.fans/?gkNetwork=${network}`,\n                '_blank',\n              );\n\n              const gatewayTokenAddress =\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\n                  wallet.publicKey!,\n                  candyMachine.state.gatekeeper.gatekeeperNetwork,\n                );\n\n              setWebSocketSubscriptionId(\n                onGatewayTokenChange(\n                  connection.connection,\n                  gatewayTokenAddress,\n                  () => setVerified(true),\n                  'confirmed',\n                ),\n              );\n            }\n          } else {\n            setClicked(false);\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </CTAButton>\n  );\n};\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport * as anchor from '@project-serum/anchor';\n\nimport styled from 'styled-components';\nimport { Container, Snackbar } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport {\n  Commitment,\n  Connection,\n  PublicKey,\n  Transaction,\n} from '@solana/web3.js';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\nimport {\n  awaitTransactionSignatureConfirmation,\n  CANDY_MACHINE_PROGRAM,\n  CandyMachineAccount,\n  createAccountsForMint,\n  getCandyMachineState,\n  getCollectionPDA,\n  mintOneToken,\n  SetupState,\n} from './candy-machine';\nimport { AlertState, formatNumber, getAtaForMint, toDate } from './utils';\nimport { MintCountdown } from './MintCountdown';\nimport { MintButton } from './MintButton';\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport { sendTransaction } from './connection';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n  network: WalletAdapterNetwork;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: '',\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(\n    async (commitment: Commitment = 'confirmed') => {\n      if (!anchorWallet) {\n        return;\n      }\n\n      const connection = new Connection(props.rpcHost, commitment);\n\n      if (props.candyMachineId) {\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet,\n            props.candyMachineId,\n            connection,\n          );\n          let active =\n            cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\n          let presale = false;\n\n          // duplication of state to make sure we have the right values!\n          let isWLUser = false;\n          let userPrice = cndy.state.price;\n\n          // whitelist mint?\n          if (cndy?.state.whitelistMintSettings) {\n            // is it a presale mint?\n            if (\n              cndy.state.whitelistMintSettings.presale &&\n              (!cndy.state.goLiveDate ||\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n            ) {\n              presale = true;\n            }\n            // is there a discount?\n            if (cndy.state.whitelistMintSettings.discountPrice) {\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\n            } else {\n              setDiscountPrice(undefined);\n              // when presale=false and discountPrice=null, mint is restricted\n              // to whitelist users only\n              if (!cndy.state.whitelistMintSettings.presale) {\n                cndy.state.isWhitelistOnly = true;\n              }\n            }\n            // retrieves the whitelist token\n            const mint = new anchor.web3.PublicKey(\n              cndy.state.whitelistMintSettings.mint,\n            );\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n              isWLUser = parseInt(balance.value.amount) > 0;\n              // only whitelist the user if the balance > 0\n              setIsWhitelistUser(isWLUser);\n\n              if (cndy.state.isWhitelistOnly) {\n                active = isWLUser && (presale || active);\n              }\n            } catch (e) {\n              setIsWhitelistUser(false);\n              // no whitelist user, no mint\n              if (cndy.state.isWhitelistOnly) {\n                active = false;\n              }\n              console.log(\n                'There was a problem fetching whitelist token balance',\n              );\n              console.log(e);\n            }\n          }\n          userPrice = isWLUser ? userPrice : cndy.state.price;\n\n          if (cndy?.state.tokenMint) {\n            // retrieves the SPL token\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\n\n              // only allow user to mint if token balance >  the user if the balance > 0\n              setIsValidBalance(valid);\n              active = active && valid;\n            } catch (e) {\n              setIsValidBalance(false);\n              active = false;\n              // no whitelist user, no mint\n              console.log('There was a problem fetching SPL token balance');\n              console.log(e);\n            }\n          } else {\n            const balance = new anchor.BN(\n              await connection.getBalance(anchorWallet.publicKey),\n            );\n            const valid = balance.gte(userPrice);\n            setIsValidBalance(valid);\n            active = active && valid;\n          }\n\n          // datetime to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.date) {\n            setEndDate(toDate(cndy.state.endSettings.number));\n            if (\n              cndy.state.endSettings.number.toNumber() <\n              new Date().getTime() / 1000\n            ) {\n              active = false;\n            }\n          }\n          // amount to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.amount) {\n            let limit = Math.min(\n              cndy.state.endSettings.number.toNumber(),\n              cndy.state.itemsAvailable,\n            );\n            if (cndy.state.itemsRedeemed < limit) {\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\n            } else {\n              setItemsRemaining(0);\n              cndy.state.isSoldOut = true;\n            }\n          } else {\n            setItemsRemaining(cndy.state.itemsRemaining);\n          }\n\n          if (cndy.state.isSoldOut) {\n            active = false;\n          }\n\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n          const collectionPDAAccount = await connection.getAccountInfo(\n            collectionPDA,\n          );\n\n          setIsActive((cndy.state.isActive = active));\n          setIsPresale((cndy.state.isPresale = presale));\n          setCandyMachine(cndy);\n\n          const txnEstimate =\n            892 +\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n            (cndy.state.tokenMint ? 177 : 0) +\n            (cndy.state.whitelistMintSettings ? 33 : 0) +\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 145 : 0) +\n            (cndy.state.gatekeeper ? 33 : 0) +\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n          setNeedTxnSplit(txnEstimate > 1230);\n        } catch (e) {\n          if (e instanceof Error) {\n            if (\n              e.message === `Account does not exist ${props.candyMachineId}`\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n                severity: 'error',\n                hideDuration: null,\n              });\n            } else if (\n              e.message.startsWith('failed to get info about account')\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n                severity: 'error',\n                hideDuration: null,\n              });\n            }\n          } else {\n            setAlertState({\n              open: true,\n              message: `${e}`,\n              severity: 'error',\n              hideDuration: null,\n            });\n          }\n          console.log(e);\n        }\n      } else {\n        setAlertState({\n          open: true,\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n          severity: 'error',\n          hideDuration: null,\n        });\n      }\n    },\n    [anchorWallet, props.candyMachineId, props.rpcHost],\n  );\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = [],\n  ) => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById('#identity')?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        let setupMint: SetupState | undefined;\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: 'Please sign account setup transaction',\n            severity: 'info',\n          });\n          setupMint = await createAccountsForMint(\n            candyMachine,\n            wallet.publicKey,\n          );\n          let status: any = { err: true };\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(\n              setupMint.transaction,\n              props.txTimeout,\n              props.connection,\n              true,\n            );\n          }\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message:\n                'Setup transaction succeeded! Please sign minting transaction',\n              severity: 'info',\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: 'Mint failed! Please try again!',\n              severity: 'error',\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Please sign minting transaction',\n            severity: 'info',\n          });\n        }\n\n        let mintResult = await mintOneToken(\n          candyMachine,\n          wallet.publicKey,\n          beforeTransactions,\n          afterTransactions,\n          setupMint ?? setupTxn,\n        );\n\n        let status: any = { err: true };\n        let metadataStatus = null;\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintResult.mintTxId,\n            props.txTimeout,\n            props.connection,\n            true,\n          );\n\n          metadataStatus =\n            await candyMachine.program.provider.connection.getAccountInfo(\n              mintResult.metadataKey,\n              'processed',\n            );\n          console.log('Metadata status: ', !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success',\n            hideDuration: 7000,\n          });\n          refreshCandyMachineState('processed');\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message:\n              'Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.',\n            severity: 'error',\n            hideDuration: 8000,\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error',\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || 'Minting failed! Please try again!';\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction timeout! Please try again.';\n        } else if (error.message.indexOf('0x137')) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: 'error',\n      });\n      // updates the candy machine state to reflect the latest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n\n  return (\n    <Container style={{ marginTop: 100 }}>\n      <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\n        <Paper\n          style={{\n            padding: 24,\n            paddingBottom: 10,\n            backgroundColor: '#151A1F',\n            borderRadius: 6,\n          }}\n        >\n          {!wallet.connected ? (\n            <ConnectButton>Connect Wallet</ConnectButton>\n          ) : (\n            <>\n              {candyMachine && (\n                <Grid\n                  container\n                  direction=\"row\"\n                  justifyContent=\"center\"\n                  wrap=\"nowrap\"\n                >\n                  <Grid item xs={3}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      Remaining\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{\n                        fontWeight: 'bold',\n                      }}\n                    >\n                      {`${itemsRemaining}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      {isWhitelistUser && discountPrice\n                        ? 'Discount Price'\n                        : 'Price'}\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{ fontWeight: 'bold' }}\n                    >\n                      {isWhitelistUser && discountPrice\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                        : `◎ ${formatNumber.asNumber(\n                            candyMachine.state.price,\n                          )}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={5}>\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\n                      <>\n                        <MintCountdown\n                          key=\"endSettings\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: 'flex-end' }}\n                          status=\"COMPLETED\"\n                          onComplete={toggleMintButton}\n                        />\n                        <Typography\n                          variant=\"caption\"\n                          align=\"center\"\n                          display=\"block\"\n                          style={{ fontWeight: 'bold' }}\n                        >\n                          TO END OF MINT\n                        </Typography>\n                      </>\n                    ) : (\n                      <>\n                        <MintCountdown\n                          key=\"goLive\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: 'flex-end' }}\n                          status={\n                            candyMachine?.state?.isSoldOut ||\n                            (endDate && Date.now() > endDate.getTime())\n                              ? 'COMPLETED'\n                              : isPresale\n                              ? 'PRESALE'\n                              : 'LIVE'\n                          }\n                          onComplete={toggleMintButton}\n                        />\n                        {isPresale &&\n                          candyMachine.state.goLiveDate &&\n                          candyMachine.state.goLiveDate.toNumber() >\n                            new Date().getTime() / 1000 && (\n                            <Typography\n                              variant=\"caption\"\n                              align=\"center\"\n                              display=\"block\"\n                              style={{ fontWeight: 'bold' }}\n                            >\n                              UNTIL PUBLIC MINT\n                            </Typography>\n                          )}\n                      </>\n                    )}\n                  </Grid>\n                </Grid>\n              )}\n              <MintContainer>\n                  <MintButton\n                    candyMachine={candyMachine}\n                    isMinting={isUserMinting}\n                    setIsMinting={val => setIsUserMinting(val)}\n                    onMint={onMint}\n                    isActive={\n                      isActive ||\n                      (isPresale && isWhitelistUser && isValidBalance)\n                    }\n                  />\n              </MintContainer>\n            </>\n          )}\n          <Typography\n            variant=\"caption\"\n            align=\"center\"\n            display=\"block\"\n            style={{ marginTop: 7, color: 'grey' }}\n          >\n            Powered by METAPLEX\n          </Typography>\n        </Paper>\n      </Container>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={\n          alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\n        }\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount,\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined,\n  );\n};\n\nexport default Home;\n","import './App.css';\nimport { useMemo } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport Home from './Home';\nimport { DEFAULT_TIMEOUT } from './connection';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from '@solana/wallet-adapter-wallets';\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from '@solana/wallet-adapter-react';\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\n\nimport { ThemeProvider, createTheme } from '@material-ui/core';\n\nconst theme = createTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n  try {\n    const candyMachineId = new anchor.web3.PublicKey(\n      process.env.REACT_APP_CANDY_MACHINE_ID!,\n    );\n\n    return candyMachineId;\n  } catch (e) {\n    console.log('Failed to construct CandyMachineId', e);\n    return undefined;\n  }\n};\n\nconst candyMachineId = getCandyMachineId();\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(\n  rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'),\n);\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSlopeWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    [],\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletDialogProvider>\n            <Home\n              candyMachineId={candyMachineId}\n              connection={connection}\n              txTimeout={DEFAULT_TIMEOUT}\n              rpcHost={rpcHost}\n              network={network}\n            />\n          </WalletDialogProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n  hideDuration?: number | null;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","import {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const DEFAULT_TIMEOUT = 60000;\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string,\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][],\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          'single',\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          undefined,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          'single',\n        );\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      'Died on ',\n      stopPoint,\n      'retrying from instruction',\n      instructions[stopPoint],\n      'instructions length is',\n      instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  candySigner: any,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = 'singleGossip',\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = beforeTransactions;\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n  unsignedTxns.push(...afterTransactions);\n\n  const partiallySignedTransactions = unsignedTxns.filter(t =>\n    t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  const fullySignedTransactions = unsignedTxns.filter(\n    t => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n\n  const candySignedTxns: Transaction[] = [];\n\n  for (let i = 0; i < partiallySignedTransactions.length; i++) {\n    // get unsigned txn for candy signer\n    let txnUnsigned = partiallySignedTransactions[i]\n    if (txnUnsigned.signatures.find(sig =>sig.publicKey.equals(candySigner))) {\n      // alright we need their signature let us add it.\n      const config = {verifySignatures: false}\n      const serializedTxn = await txnUnsigned.serialize(config)\n  \n      const fetchSignature = await fetch('api/sign-me-please',\n      { method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\",\n        },\n        body: JSON.stringify({\"txn\": serializedTxn})}\n      )\n      const dataJson = await fetchSignature.json() as {txn: Buffer, cms: string};\n      // console.log(dataJson);\n      const txn = dataJson.txn;\n\n      let cmsSignedTxn = Transaction.from(txn.data);\n      console.log(cmsSignedTxn)\n      candySignedTxns.push(cmsSignedTxn);\n    }\n    candySignedTxns.push(txnUnsigned);\n  }\n  let signedTxns = await wallet.signAllTransactions(\n    candySignedTxns,\n  );\n\n  signedTxns = fullySignedTransactions.concat(signedTxns);\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  console.log(\n    'Signed txns length',\n    signedTxns.length,\n    'vs handed in length',\n    instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise.then(({ txid, slot }) =>\n          successCallback(txid, i),\n        );\n        pendingTxns.push(signedTxnPromise);\n      } catch (e) {\n        console.log('Failed at txn index:', i);\n        console.log('Caught failure:', e);\n\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          return {\n            number: i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    const result = await Promise.all(pendingTxns);\n    return { number: signedTxns.length, txs: result };\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[] | Transaction,\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction: Transaction;\n  if (instructions instanceof Transaction) {\n    transaction = instructions;\n  } else {\n    transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n\n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n      );\n    }\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n  console.log(transaction);\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      'recent',\n      true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = 'recent',\n  queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport {\n  SystemProgram,\n  Transaction,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n  PublicKey,\n} from '@solana/web3.js';\nimport { sendTransactions, SequenceType } from './connection';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  // 'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\n  'CnDYpzubbYDigGfMpDKdy23dqUuVhsALqtf2FTX7EgqL',\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\ninterface CandyMachineState {\n  authority: anchor.web3.PublicKey;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: null | anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: anchor.BN;\n  isSignatureRequired: boolean;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n  retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'processed',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      authority: state.authority,\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      isSignatureRequired: state.data.isSignatureRequired,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport const getCollectionPDA = async (\n  candyMachineAddress: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('collection'), candyMachineAddress.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport interface CollectionData {\n  mint: anchor.web3.PublicKey;\n  candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n  mint: anchor.web3.PublicKey,\n  newAuthority: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('collection_authority'),\n        newAuthority.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport type SetupState = {\n  mint: anchor.web3.Keypair;\n  userTokenAccount: anchor.web3.PublicKey;\n  transaction: string;\n};\n\nexport const createAccountsForMint = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n): Promise<SetupState> => {\n  const mint = anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const signers: anchor.web3.Keypair[] = [mint];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    ),\n  ];\n\n  return {\n    mint: mint,\n    userTokenAccount: userTokenAccountAddress,\n    transaction: (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        undefined,\n        candyMachine.program.provider.wallet,\n        [instructions],\n        [signers],\n        SequenceType.StopOnFailure,\n        'singleGossip',\n        () => {},\n        () => false,\n        undefined,\n        [],\n        [],\n      )\n    ).txs[0].txid,\n  };\n};\n\ntype MintResult = {\n  mintTxId: string;\n  metadataKey: anchor.web3.PublicKey;\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n  setupState?: SetupState,\n): Promise<MintResult | null> => {\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineSigner = new PublicKey(process.env.REACT_APP_CANDY_SIGNER_PUB!);\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const cleanupInstructions = [];\n  const instructions = [];\n  const signers: anchor.web3.Keypair[] = [];\n  console.log('SetupState: ', setupState);\n  if (!setupState) {\n    signers.push(mint);\n    instructions.push(\n      ...[\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports:\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n              MintLayout.span,\n            ),\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          payer,\n          payer,\n        ),\n        createAssociatedTokenAccountInstruction(\n          userTokenAccountAddress,\n          payer,\n          payer,\n          mint.publicKey,\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          userTokenAccountAddress,\n          payer,\n          [],\n          1,\n        ),\n      ],\n    );\n  }\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await candyMachine.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        candyMachine.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress,\n  );\n\n  console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        candyMachineSigner:candyMachineSigner,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount =\n    await candyMachine.program.provider.connection.getAccountInfo(\n      collectionPDA,\n    );\n\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n    try {\n      const collectionData =\n        (await candyMachine.program.account.collectionPda.fetch(\n          collectionPDA,\n        )) as CollectionData;\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n        collectionMint,\n        collectionPDA,\n      );\n      console.log(collectionMint);\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        console.log('Collection PDA: ', collectionPDA.toBase58());\n        console.log('Authority: ', candyMachine.state.authority.toBase58());\n        instructions.push(\n          await candyMachine.program.instruction.setCollectionDuringMint({\n            accounts: {\n              candyMachine: candyMachineAddress,\n              metadata: metadataAddress,\n              payer: payer,\n              collectionPda: collectionPDA,\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n              collectionMint,\n              collectionMetadata,\n              collectionMasterEdition,\n              authority: candyMachine.state.authority,\n              collectionAuthorityRecord,\n            },\n          }),\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const instructionsMatrix = [instructions, cleanupInstructions];\n  const signersMatrix = [signers, []];\n\n  try {\n    const txns = (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachineSigner,\n        candyMachine.program.provider.wallet,\n        instructionsMatrix,\n        signersMatrix,\n        SequenceType.StopOnFailure,\n        'singleGossip',\n        () => {},\n        () => false,\n        undefined,\n        beforeTransactions,\n        afterTransactions,\n      )\n    ).txs.map(t => t.txid);\n    const mintTxn = txns[0];\n    return {\n      mintTxId: mintTxn,\n      metadataKey: metadataAddress,\n    };\n  } catch (e) {\n    console.log(e);\n  }\n  return null;\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n"],"sourceRoot":""}